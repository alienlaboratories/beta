#
# Copyright 2017 Alien Labs.
#

#
# http://graphql.org/learn/schema
# https://facebook.github.io/graphql
#

#===================================================================================================
# Basic types.
# Not entities (i.e., only composite objects).
# TODO(burdon): Consider third-party extensibility?
#===================================================================================================

type Geo {
  lat:              Float!
  lng:              Float!
}

type Address {
  street:           String
  city:             String
  code:             String
  country:          String
  geo:              Geo
}

type Location {
  type:             String              # e.g., airport
  code:             String              # Type-specific ID (e.g., JFK).
  address:          Address
}

type Leg {
  transaction:      String              # Transaction ID.
  ticket:           String
  conf:             String
  carrier:          String
  number:           String              # E.g., flight #
  start:            DateTime
  end:              DateTime
  from:             Location
  to:               Location
}

#===================================================================================================
# Item.
# TODO(burdon): Move common fields into meta?
# http://dev.apollodata.com/tools/graphql-tools/resolvers.html#Unions-and-interfaces
# https://github.com/apollostack/graphql-server/issues/172
#
# Design constraints:
# - Make non Item fields optional (esp arrays).
#===================================================================================================

# Common properties.
type Meta {
  icon:             String              # Material icon name.
  iconClassName:    String              # Item classname.
  thumbnailUrl:     String              # External thumbnail URL.
}

interface Item {
  namespace:        String              # External namespace (query provider).
  bucket:           ID                  # ID of User or Group (null for system item).
  type:             String!
  id:               ID!
  version:          Int                 # TODO(burdon): Version (separate monotonic seq for mutations).

  # TODO(burdon): Multiple foreign keys (e.g., emails, linkedin).
  fkey:             String              # Opaque foreign key (i.e., not Key).

  alias:            String              # Short-name for URLs (unique, human-readable).
  created:          Timestamp!          # Unix ms timestamp: _.now()
  modified:         Timestamp!
  labels:           [String]

  title:            String!
  description:      String

  meta:             Meta
}

#===================================================================================================
# System Types.
#===================================================================================================

type User implements Item {
  namespace:        String
  bucket:           ID
  type:             String!
  id:               ID!
  version:          Int
  fkey:             String
  alias:            String
  created:          Timestamp!
  modified:         Timestamp!
  labels:           [String]
  title:            String!
  description:      String
  meta:             Meta

  active:           Boolean

  # TODO(burdon): Part of contact?
  email:            String

  # TODO(burdon): Bi-directional? (ref from User to System store?)
  contact:          Contact

  groups:           [Group]

  # TODO(burdon): Remove (only query via project links).
  tasks(filter: FilterInput): [Task]
}

type Group implements Item {
  namespace:        String
  bucket:           ID
  type:             String!
  id:               ID!
  version:          Int
  fkey:             String
  alias:            String
  created:          Timestamp!
  modified:         Timestamp!
  labels:           [String]
  title:            String!
  description:      String
  meta:             Meta

  whitelist:        [String]
  members:          [User]!

  # TODO(burdon): Shouldn't be part of Group (i.e., span namespaces). Instead link (since many-to-may).
  projects:         [Project]!
}

#===================================================================================================
# Item Types.
#===================================================================================================

type Contact implements Item {
  namespace:        String
  bucket:           ID
  type:             String!
  id:               ID!
  version:          Int
  fkey:             String
  alias:            String
  created:          Timestamp!
  modified:         Timestamp!
  labels:           [String]
  title:            String!
  description:      String
  meta:             Meta

  user:             User

  email:            String

  # Sub-tasks (do not belong to any Project).
  tasks:            [Task]

  # Synced messages.
  messages:         [Message]!
}

type Document implements Item {
  namespace:        String
  bucket:           ID
  type:             String!
  id:               ID!
  version:          Int
  fkey:             String
  alias:            String
  created:          Timestamp!
  modified:         Timestamp!
  labels:           [String]
  title:            String!
  description:      String
  meta:             Meta

  externalUrl:      String
}

type Event implements Item {
  namespace:        String
  bucket:           ID
  type:             String!
  id:               ID!
  version:          Int
  fkey:             String
  alias:            String
  created:          Timestamp!
  modified:         Timestamp!
  labels:           [String]
  title:            String!
  description:      String
  meta:             Meta

  location:         Location
  participants:     [Contact]
  start:            DateTime!
  end:              DateTime!
}

type Folder implements Item {
  namespace:        String
  bucket:           ID
  type:             String!
  id:               ID!
  version:          Int
  fkey:             String
  alias:            String
  created:          Timestamp!
  modified:         Timestamp!
  labels:           [String]
  title:            String!
  description:      String
  meta:             Meta

  # JSON serialized FilterInput.
  filter: String!
}

type Message implements Item {
  namespace:        String
  bucket:           ID
  type:             String!
  id:               ID!
  version:          Int
  fkey:             String
  alias:            String
  created:          Timestamp!
  modified:         Timestamp!
  labels:           [String]
  title:            String!
  description:      String
  meta:             Meta

  snippet:          String
  from:             String!
  to:               [String]!
}

type Project implements Item {
  namespace:        String
  bucket:           ID
  type:             String!
  id:               ID!
  version:          Int
  fkey:             String
  alias:            String
  created:          Timestamp!
  modified:         Timestamp!
  labels:           [String]
  title:            String!
  description:      String
  meta:             Meta

  # All projects are owned by a Group (each User has a private Group).
  group:            Group!

  # TODO(burdon): Map type (array of typed values).
  boards:           [Board]

  # Sub-tasks.
  tasks:            [Task]

  items(boardAlias: String!): [Item]
}

type Task implements Item {
  namespace:        String
  bucket:           ID
  type:             String!
  id:               ID!
  version:          Int
  fkey:             String
  alias:            String
  created:          Timestamp!
  modified:         Timestamp!
  labels:           [String]
  title:            String!
  description:      String
  meta:             Meta

  # All tasks belong to a project.
  project:          Project

  # Sub-tasks.
  tasks:            [Task]

  owner:            User!
  assignee:         User
  status:           Int!
}

type Transaction implements Item {
  namespace:        String
  bucket:           ID
  type:             String!
  id:               ID!
  version:          Int
  fkey:             String
  alias:            String
  created:          Timestamp!
  modified:         Timestamp!
  labels:           [String]
  title:            String!
  description:      String
  meta:             Meta

  vendor:           String              # e.g., "Air France" or Company Item ID.
  paymentType:      String              # e.g., "amex"
  paymentNumber:    String              # e.g., "0721-222-0718"
  date:             DateTime
  currency:         String
  amount:           Float
}

type Trip implements Item {
  namespace:        String
  bucket:           ID
  type:             String!
  id:               ID!
  version:          Int
  fkey:             String
  alias:            String
  created:          Timestamp!
  modified:         Timestamp!
  labels:           [String]
  title:            String!
  description:      String
  meta:             Meta

  # TODO(burdon): Event? E.g., hotel, car rental.
  legs:             [Leg]
}

#===================================================================================================
# Root Viewer for authenticated User.
#===================================================================================================

type Client {

  id: String!
}

type Viewer {

  # Authenticated user.
  user: User!

  # All Groups User belongs to.
  groups: [Group]

  # Folders.
  folders: [Folder]!
}

#===================================================================================================
# Search Results.
#===================================================================================================

# TODO(burdon): Add metadata (e.g., timestamp).
type SearchResult {

  # Results.
  items: [Item]!

  # Grouped results.
  groupedItems: [GroupedItems]
}

# Groups items (via groupBy query).
# TODO(burdon): Generalize to a Tree?
type GroupedItems {

  # Parent item ID.
  id: ID!

  # Grouped children IDs.
  groups: [GroupSet]
}

type GroupSet {

  field: String!

  ids: [ID]!
}

#===================================================================================================
# Queries.
# NOTE: Must only have Input types (since regular types might be recursive and therefore not serializable).
# https://github.com/graphql/graphql-js/issues/312
#===================================================================================================

type RootQuery {

  # Current user.
  viewer: Viewer!

  # Get specific item.
  item(key: KeyInput!): Item!

  # Get linked items.
  # TODO(burdon): Link type.
  links(source: KeyInput!, kind: String!): [Item]!

  # Search.
  search(filter: FilterInput): SearchResult!
}

#===================================================================================================
# Mutations.
# NOTE: The namespace is provided in the resolver context.
#===================================================================================================

type RootMutation {

  # TODO(burdon): Set bucket?
  batchMutation(namespace: String, itemMutations: [ItemMutationInput]!): BatchMutationResponse!
}

#===================================================================================================
# Schema.
#===================================================================================================

schema {

  query: RootQuery

  mutation: RootMutation
}
