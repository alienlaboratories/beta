//
// Copyright 2017 Alien Labs.
//

import BeeQueue from 'bee-queue';

/**
 * Queue wrapper.
 * Kue/Bull/Bee abstraction.
 * Promise API.
 */
export class Queue {

  static DEFAULT_OPTS = {
    isWorker: false,
    getEvents: false,
    sendEvents: false
  };

  static DEFAUL_WORKER_OPTS = {
    removeOnSuccess: true
  };

  constructor(name, worker=false) {
    this._queue = new BeeQueue(name, worker ? Queue.DEFAUL_WORKER_OPTS : Queue.DEFAULT_OPTS);
  }

  /**
   * Adds a job.
   *
   * @param value
   * @returns {Promise}
   */
  add(value) {
    return new Promise((resolve, reject) => {
      this._queue.createJob(value).save((err, job) => {
        if (err) {
          reject(err);
        } else {
          resolve(job);
        }
      });
    });
  }

  /**
   * Sets the job processor.
   *
   * @param f
   * @returns {Queue}
   */
  process(f) {
    this._queue.process((job, done) => {
      Promise.resolve(f(job))
        .then(value => done(null, value))
        .catch(error => done(error));
    });

    return this;
  }

  /**
   * Release the connection.
   */
  close() {
    this._queue.close();
  }
}
